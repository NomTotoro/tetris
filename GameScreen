import java.util.Iterator;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.audio.Music;
import com.badlogic.gdx.audio.Sound;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.math.MathUtils;
import com.badlogic.gdx.math.Rectangle;
import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.TimeUtils;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer.ShapeType;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.InputProcessor;

public class GameScreen implements Screen, InputProcessor
{

    final Tetris game;
    OrthographicCamera camera;
    
    Texture block;
    
    final int width = 10;
    final int height = 20;
    final int blockSize = 32;
    Vector2 boardLocation;
    
    int[][] board;
    
    public GameScreen(final Tetris gam) 
    {
        this.game = gam;
        
        block = new Texture("block.png");
        
        board = new int[width][height];
        boardLocation = Vector2.Zero;


        // create the camera and the SpriteBatch
        camera = new OrthographicCamera();
        camera.setToOrtho(false, 800, 480);


        // create the raindrops array and spawn the first raindrop

        Gdx.input.setInputProcessor(this);
    }


    @Override
    public void render(float delta) {
        // clear the screen with a dark blue color. The
        // arguments to glClearColor are the red, green
        // blue and alpha component in the range [0,1]
        // of the color to be used to clear the screen.
        Gdx.gl.glClearColor(1, 1, 1, 1);
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);

        // tell the camera to update its matrices.
        camera.update();

        // tell the SpriteBatch to render in the
        // coordinate system specified by the camera.
        game.batch.setProjectionMatrix(camera.combined);

        game.batch.begin();

        for (int y = 0; y < height; y++)
        {
            for (int x = 0; x < width; x++)
            {
                Color tint = Blocks.colors[board[x][y]];
                
                if (board[x][y] == 0)
                {
                    tint = new Color(50, 50, 50, 50);
                }
                game.batch.setColor(tint);
                game.batch.draw(block, (int)boardLocation.x + x * blockSize, (int)boardLocation.y + y * blockSize);
            }
        }
        
        game.batch.end();

        

    }

    

    @Override
    public void resize(int width, int height) 
    {
    }

    @Override
    public void show() {

    }

    @Override
    public void hide() {
    }

    @Override
    public void pause() {
    }

    @Override
    public void resume() {
    }

    @Override
    public void dispose() {
    }

    public boolean keyDown (int keycode) 
    {
        return false;
    }

    public boolean keyUp (int keycode) 
    {
        return false;
    }

    public boolean keyTyped (char character) 
    {
        return false;
    }

    public boolean touchDown (int x, int y, int pointer, int button) 
    {
        return false;
    }

    public boolean touchUp (int x, int y, int pointer, int button) 
    {
        return false;
    }

    public boolean touchDragged (int screenX, int screenY, int pointer)
    { 
        return false;
    }

    public boolean mouseMoved (int x, int y)
    {
        return false;
    }

    public boolean scrolled (int amount)
    {
        return false;
    }
}

